?segmentationOriginal
modFit<-train(Class~.,method="rpart",data=training)
print(modFit$finalModel)
plot(modFit$finalModel,uniform=TRUE)
text(modFit$finalModel,use.n=TRUE,all=TRUE,cex=.8)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
inTrain <- createDataPartition(y=segmentationOriginal$Case,
p=0.75, list=FALSE)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
set.seed(125)
modFit<-train(Class~.,method="rpart",data=training)
print(modFit$finalModel)
plot(modFit$finalModel,uniform=TRUE)
text(modFit$finalModel,use.n=TRUE,all=TRUE,cex=.8)
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
names(olive)
install.packages("tree")
?olive
?tree
library(tree)
?tree
modFit<-tree(Area~.,data=olive)
newdata = as.data.frame(t(colMeans(olive)))
newdata
colMeans(olive)
class(colMeans(olive))
t(colMeans(olive))
class(t(colMeans(olive)))
mean(olive$Area)
predict(modFit,newdata=newdata)
plot(modFit$finalModel,uniform=TRUE)
text(modFit$finalModel,use.n=TRUE,all=TRUE,cex=.8)
data(olive)
olive = olive[,-1]
modFit<-tree(Area~.,data=olive)
newdata = as.data.frame(t(colMeans(olive)))
predict(modFit,newdata=newdata)
print(modFit$finalModel)
plot(modFit)
?tree
plot(modFit.ltr)
modFit
names(modFit)
modFit$frame
plot(modFit$frame)
plot(modFit$terms)
plot(modFit$y)
newdata
modFit
modFit<-train(Area~.,method="rpart",data=training)
modFit<-train(Area~.,method="rpart",data=olive)
modFit<-train(Area~.,method="rpart",data=olive)
library(pgmm)
data(olive)
olive = olive[,-1]
modFit<-train(Area~.,method="rpart",data=olive)
print(modFit$finalModel)
plot(modFit$finalModel,uniform=TRUE)
text(modFit$finalModel,use.n=TRUE,all=TRUE,cex=.8)
modFit<-tree(Area~.,data=olive)
newdata = as.data.frame(t(colMeans(olive)))
predict(modFit,newdata=newdata)
modFit
plot(modFit)
text(modFit)
newdata
str(olive)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
?train
names(trainSA)
modelFit<-train(chd~age+alcohol+obesity+tobacco+type+ldl,method="glm",family="binomial")
modelFit<-train(chd~age+alcohol+obesity+tobacco+type+ldl,method="glm",family="binomial",data=trainSA)
modelFit<-train(chd~age+alcohol+obesity+tobacco+typea+ldl,method="glm",family="binomial",data=trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd,predict(modelFit,newdata=trainSA))
missClass(testSA$chd,predict(modelFit,newdata=testSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
names(vowel.train)
str(vowel.train)
vowel.train$y<-as.factor(vowel.train$y)
vowel.test$y<-as.factor(vowel.test$y)
str(vowel.train)
modFit<-train(y~.,data=vowel.train,method="rf",prox=TRUE)
set.seed(33833)
modFit<-train(y~.,data=vowel.train,method="rf",prox=TRUE)
library(caret)
?varImp
varImp(modFit)
library(ElemStatLearn)
library(caret)
data(vowel.train)
data(vowel.test)
vowel.train$y<-as.factor(vowel.train$y)
vowel.test$y<-as.factor(vowel.test$y)
set.seed(33833)
modFit<-train(y~.,data=vowel.train,method="rf")
varImp(modFit)
modFit<-randomForest(y~.,data=vowel.train)
varImp(modFit)
set.seed(33833)
modFit<-randomForest(y~.,data=vowel.train)
varImp(modFit)
varImp(modFit)[order(varImp(modFit),decreasing=TRUE)]
varImp(modFit)
str(varImp(modFit))
varImp(modFit)[order(varImp(modFit)),decreasing=TRUE)]
varImp(modFit)[1][order(varImp(modFit)[1],decreasing=TRUE)]
varImp(modFit)[1]
varImp(modFit)[1,]
varImp(modFit)[,1]
varImp(modFit)[,1][order(varImp(modFit)[,1],decreasing=TRUE)]
varImp(modFit)[order(varImp(modFit)[,1],decreasing=TRUE)]
varImp(modFit)[,1][order(varImp(modFit)[,1],decreasing=TRUE)]
x<-varImp(modFit)[,1][order(varImp(modFit)[,1],decreasing=TRUE)]
names(x)
rownames(x)
varImp(modFit)[,1]
varImp(modFit)
?varImp
rownames(varImp(modFit))
rownames(varImp(modFit))[order(varImp(modFit)[,1],decreasing=TRUE)]
shuttle
install.packages("MASS")
data(shuttle)
library(MASS)
data(shuttle)
names(shuttle)
head(shuttle)
shuttle
shuttle$auto
names(shuttle)
shuttle$use
shuttle$use=="auto"
shuttle$use[shuttle$use=="auto"]<-1
shuttle$use[shuttle$use=="auto"]
shuttle$use
data(shuttle)
shuttle
str(shuttle)
glm(use~wind,family="binomial",data=shuttle)
fit<-glm(use~wind,family="binomial",data=shuttle)
exp(fit$coeff)
shuttle
shuttle
fit<-glm(use~wind+magn,family="binomial",data=shuttle)
fit
exp(fit$coeff)
fit<-glm(use~wind,family="binomial",data=shuttle)
exp(fit$coeff)
e^(0.777778+0.9686888)/(1+e^(0.777778+0.9686888))
exp(0.777778+0.9686888)/(1+exp(0.777778+0.9686888))
fit<-glm(use~wind+magn,family="binomial",data=shuttle)
exp(fit$coeff)
fit<-glm(use~wind+magn-1,family="binomial",data=shuttle)
exp(fit$coeff)
shuttle$magn
exp(fit$coeff)
fit<-glm(use~wind+magn,family="binomial",data=shuttle)
exp(fit$coeff)
InsectSprays
names(InsectSpray)
names(InsectSprays)
fit<-glm(count~spray,family="poisson",data=InsectSprays)
exp(fit$coefficients)
fit<-glm(count~spray-1,family="poisson",data=InsectSprays)
exp(fit$coefficients)
15.333333/14.5
fit<-glm(count~spray,family="poisson",data=InsectSprays)
15.333333/14.5
exp(fit$coefficients)
1/1.0574713
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
splineterms<-sapply(x,function(x){(x>0)*(x-0)})
splineterms(1)
splineterms
lm(y~x+splineterms)
shuttle$wind <- factor(shuttle$wind, levels=c("tail","head"), labels=c(0,1))
fit <- glm(use~auto,...,data=shuttle)
shuttle$wind <- factor(shuttle$wind, levels=c("tail","head"), labels=c(0,1))
fit <- glm(use~auto,family="binomial",data=shuttle)
names(shuttle)
shuttle$wind <- factor(shuttle$wind, levels=c("tail","head"), labels=c(0,1))
fit <- glm(use~use,family="binomial",data=shuttle)
shuttle$use <- factor(shuttle$use, levels=c("noauto","auto"), labels=c(0,1))
shuttle$wind <- factor(shuttle$wind, levels=c("tail","head"), labels=c(0,1))
fit <- glm(use~use,family="binomial",data=shuttle)
shuttle
data(Shuttle)
library(MASS)
data(shuttle)
shuttle$use <- factor(shuttle$use, levels=c("noauto","auto"), labels=c(0,1))
shuttle$use
shuttle$wind <- factor(shuttle$wind, levels=c("tail","head"), labels=c(0,1))
shuttle
fit<-glm(use~wind,family="binomial",data=shuttle)
exp(fit$coeff)
fit<-glm(use~wind+magn,family="binomial",data=shuttle)
exp(fit$coeff)
plot(x,y)
yhat<-predict(lm(y~x+splineterms))
lines(x,yhat)
fit<-lm(y~x+splineterms)
fit$coeff
2.0372258-1.0241584
glm(count~Spray+offset(count+1),family="poisson")
glm(count~Spray+offset(count+1),family="poisson",data=InsectSprays)
names(InsectSprays)
glm(count~spray+offset(count+1),family="poisson",data=InsectSprays)
glm(count~spray+offset(count),family="poisson",data=InsectSprays)
glm(count~spray,family="poisson",data=InsectSprays)
download.file("https://dl.dropboxusercontent.com/u/7710864/data/gaData.rda",destfile="./data/gaData.rda"
load("./data/gaData.rda")
gaData$julian <- julian(gaData$date)
head(gaData)
download.file("https://dl.dropboxusercontent.com/u/7710864/data/gaData.rda",destfile="./data/gaData.rda")
load("./data/gaData.rda")
gaData$julian <- julian(gaData$date)
head(gaData)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
glm(y~x,family=poisson)
t<- -1:1
rm(list=ls)
rm(list=ls())
?seq
t<- seq(-1,1,by=0.1)
?rand
2.05, 2.54, 3.87)
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87)
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87,5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87)
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97,5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
y <- c(5.12, 3.93, 2.67, 1.87, 0.52,0.93, 2.05, 2.54, 3.87, 4.97,5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(y,t)
plot(t,y)
glm(y~t,family=poisson)
warnings()
glm(y~t,family=poisson)
glm(y~t+offset(log(t)))
glm(y~t+offset(log(t)),family=poisson)
t<- seq(1,3,by=0.1)
y <- c(5.12, 3.93, 2.67, 1.87, 0.52,0.93, 2.05, 2.54, 3.87, 4.97,5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(t,y)
glm(y~t+offset(log(t)),family=poisson)
glm(y~t+offset(log(10)+log(t)),family=poisson)
library(quandl)
install.packages("Quandl")
library(Quandl)
library(Quandl)
Quandl.auth("ByxzE7HiZ2JxhaCAxYhV")
dat<-read.csv("http://www.quandl.com/api/v2/datasets.csv?query=*&source_code=JODI&per_page=300&page=1&auth_token=ByxzE7HiZ2JxhaCAxYhV")
dat
names(dat)
str(dat)
rm(list=ls())
url<-"http://www.quandl.com/api/v2/datasets.csv?query=*&source_code=JODI&per_page=300&page="
page<-1
url<-paste0(url,page,"&auth_token=ByxzE7HiZ2JxhaCAxYhV")
url
library(Quandl)
Quandl.auth("ByxzE7HiZ2JxhaCAxYhV")
metadat<-data.frame()
for (i in 1:73) {
url<-"http://www.quandl.com/api/v2/datasets.csv?query=*&source_code=JODI&per_page=300&page="
page<-i
url<-paste0(url,page,"&auth_token=ByxzE7HiZ2JxhaCAxYhV")
pull<-read.csv(url)
metadat<-rbind(metadat,pull)
}
url
read.csv(url)
str(metadat)
dat<-read.csv(url)
str(dat0)
str(dat)
head(dat)
pull<-read.csv(url,headers=FALSE)
?read.csv
pull<-read.csv(url,header=FALSE)
pull
library(Quandl)
Quandl.auth("ByxzE7HiZ2JxhaCAxYhV")
metadat<-data.frame()
for (i in 1:73) {
url<-"http://www.quandl.com/api/v2/datasets.csv?query=*&source_code=JODI&per_page=300&page="
page<-i
url<-paste0(url,page,"&auth_token=ByxzE7HiZ2JxhaCAxYhV")
pull<-read.csv(url,header=FALSE)
metadat<-rbind(metadat,pull)
}
colnames(metadat)<-c("Code","Name","Start Date","End Date","Frequency","Last Updated")
summary(metadat)
grep("GAS",metadat$Code)
metadat$Code[grep("GAS",metadat$Code)]
library(Quandl)
Quandl.auth("ByxzE7HiZ2JxhaCAxYhV")
# Obtaining the metadata table
metadat<-data.frame()
for (i in 1:73) {
url<-"http://www.quandl.com/api/v2/datasets.csv?query=*&source_code=JODI&per_page=300&page="
page<-i
url<-paste0(url,page,"&auth_token=ByxzE7HiZ2JxhaCAxYhV")
pull<-read.csv(url,header=FALSE)
metadat<-rbind(metadat,pull)
}
colnames(metadat)<-c("Code","Name","Start Date","End Date","Frequency","Last Updated")
library(Quandl)
Quandl.auth("ByxzE7HiZ2JxhaCAxYhV")
# Obtaining the metadata table
metadat<-data.frame()
for (i in 1:73) {
url<-"http://www.quandl.com/api/v2/datasets.csv?query=*&source_code=JODI&per_page=300&page="
page<-i
url<-paste0(url,page,"&auth_token=ByxzE7HiZ2JxhaCAxYhV")
pull<-read.csv(url,header=FALSE)
metadat<-rbind(metadat,pull)
}
metadat
names(metadat)
head(metadat)
read.table("https://s3.amazonaws.com/quandl-static-content/API+Descriptions/WHO/ccodes.txt")
ISOcty<-read.table("https://s3.amazonaws.com/quandl-static-content/API+Descriptions/WHO/ccodes.txt")
head(ISOcty)
Quandl("ODA/ABW_NGDP_FY")
library(Quandl)
library(plyr)
Quandl.auth("ByxzE7HiZ2JxhaCAxYhV")
# ISO codes for all countries
ISOcty<-read.table("https://s3.amazonaws.com/quandl-static-content/API+Descriptions/WHO/ccodes.txt")
Quandl("ODA/ABW_NGDP_FY")
Quandl("ODA/EGY_NGDP_FY")
Quandl("ODA/SGP_NGDP_FY")
library(XML)
library(xlsx)
library(reshape2)
library(RCurl)
library(curl)
url8<-"https://www.bis.org/statistics/credtopriv/credtopriv.xlsx"
download.file(url8,destfile="temp.xlsx",method="curl")
download.file(url8,destfile="temp.xlsx",method="auo")
download.file(url8,destfile="temp.xlsx",method="auto")
read.xlsx("temp.xlsx",sheetIndex=3)
install.packages("downloader")
library(downloader)
download(url8,destfile="temp.xlsx")
download(url8,destfile="credtopriv.xls")
library(XML)
library(xlsx)
library(reshape2)
library(RCurl)
library(curl)
library(downloader)
url8<-"https://www.bis.org/statistics/credtopriv/credtopriv.xlsx"
download(url8,destfile="credtopriv.xlsx",mode="wb")
read.xlsx("credittopriv.xlsx",sheetIndex=3)
read.xlsx("credtopriv.xlsx",sheetIndex=3)
dat8<-read.xlsx("credtopriv.xlsx",sheetIndex=3)
head(dat8)
head(dat8)
?read.xlsx
dat8<-read.xlsx("credtopriv.xlsx",sheetIndex=3,startRow=2)
head(dat8)
head(dat8)
names(dat)
names(dat8)
dat8$NA.
dat8$NA.<-as.Date(dat8$NA.)
dat8$NA.<-as.Date(as.character(dat8$NA.))
dat8$NA.<-as.Date(as.numeric(dat8$NA.))
dat8$NA.<-as.Date(as.numeric(dat8$NA.),origin="01-01-1990")
dat8$NA.
dat8<-read.xlsx("credtopriv.xlsx",sheetIndex=3,startRow=3)
dat8$NA.<-as.Date(as.numeric(dat8$NA.),origin="01-01-1990")
dat8$NA.
dat8[,1]
names(dat8)
dat8$Period......
class(dat8$Period......)
temp<-read.csv("http://stats.bis.org/bis-stats-tool/org.bis.stats.ui.StatsApplication/ResultDownload?format=csv&compress=false&bookmark=true&query=eJxdT0tOwzAUHD%2BVr0DiBLDthkP4l8atkxT7RWnLwoeC83EWJiCxwAvP570Z2YDJH%2B%2BvL3hyqS7RNW%2B1%2Bj4OEc%2BUVSmbTmpz8yWGpC1YtV2eFvBcATefxFviF%2FHaGN6CRzeVMi2x1Ob1TGsLqRHSJYgWiLeQY4Ykev4CCcQd%2FeEM6Q8Qt2pHPjPH3XHi7MT9ALlQnwaIVfYxk4hphBzIR3Zqz256ec3uIIXoOAvsjZU5cktvJvfc3R%2BJIzZdiW98qYFZgZ8ANv8%2Fcq%2B%2B5TgGajyQ%2F01xR2XDfq760%2FHb9g0jfT3l")
head(dat8)
temp<-melt(dat8)
head(temp)
names(dat8)
melt(dat8,id.var="Period......")
tail(temp)
warnings()
str(dat8)
dat8[,2:ncol(dat8)]
ncol(dat8)
dat8[,2:ncol(dat8)]<-as.numeric(dat8[,2:ncol(dat8)])
as.numeric(dat8[,2:ncol(dat8)]
)
str(dat8)
for (i in 2:ncol(dat8)) {dat8[,i]<-as.numeric(dat8[,i])}
str(dat8)
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
install.packages("shiny")
library(shiny)
runExample("01_hello")
shinyUI(pageWithSidebar(
headerPanel("Hello Shiny!"),
sidebarPanel(
textInput(inputId="text1", label = "Input Text1"),
textInput(inputId="text2", label = "Input Text2")
),
mainPanel(
p('Output text1'),
textOutput('text1'),
p('Output text2'),
textOutput('text2'),
p('Output text3'),
textOutput('text3'),
p('Outside text'),
textOutput('text4'),
p('Inside text, but non-reactive'),
textOutput('text5')
)
))
dat<-readHTMLTable("http://asianbondsonline.adb.org/spreadsheets/RG-LCY_Bond_Market_USD.xls")
dat<-data.frame(dat)
library(XML)
dat<-readHTMLTable("http://asianbondsonline.adb.org/spreadsheets/RG-LCY_Bond_Market_USD.xls")
dat<-data.frame(dat)
head(dat)
names(dat)
gsub("NULL.","",names(dat))
dat2<-readHTMLTable("http://asianbondsonline.adb.org/spreadsheets/RG-FCY_Bonds_Outstanding.xls")
dat2<-data.frame(dat2)
names(dat2)
names(dat2)<-gsub("NULL.","",names(dat2))
dat<-merge(dat,dat2,by=c("Date","Market"),all=TRUE)
merge(dat,dat2,by=c("Date","Market"),all=TRUE)
names(dat)
names(dat2)
names(dat)<-gsub("NULL.","",names(dat))
dat<-merge(dat,dat2,by=c("Date","Market"),all=TRUE)
rm(dat2)
names(dat)
rm(list=ls())
dat<-readHTMLTable("http://asianbondsonline.adb.org/spreadsheets/RG-LCY_Bond_Market_USD.xls")
dat<-data.frame(dat)
names(dat)<-gsub("NULL.","",names(dat))
names(dat)
names(dat)[3:length(names(dat))]
FCY+names(dat)[3:length(names(dat))]
"FCY" + names(dat)[3:length(names(dat))]
paste("FCY",names(dat)[3:length(names(dat))])
names(dat)[3:length(names(dat))]<-paste0("FCY Bonds Issued By",names(dat)[3:length(names(dat))])
names(dat)
dat<-readHTMLTable("http://asianbondsonline.adb.org/spreadsheets/RG-LCY_Bond_Market_USD.xls")
dat<-data.frame(dat)
names(dat)<-gsub("NULL.","",names(dat))
names(dat)[3:length(names(dat))]<-paste("FCY Bonds Issued By",names(dat)[3:length(names(dat))])
names(dat)
dat2<-readHTMLTable("http://asianbondsonline.adb.org/spreadsheets/RG-FCY_Bonds_Outstanding.xls")
dat2<-data.frame(dat2)
names(dat2)<-gsub("NULL.","",names(dat2))
names(dat2)
dat<-readHTMLTable("http://asianbondsonline.adb.org/spreadsheets/RG-LCY_Bond_Market_USD.xls")
dat<-data.frame(dat)
names(dat)<-gsub("NULL.","",names(dat))
names(dat)[3:length(names(dat))]<-paste("LCY Bonds Issued By",names(dat)[3:length(names(dat))])
dat2<-readHTMLTable("http://asianbondsonline.adb.org/spreadsheets/RG-FCY_Bonds_Outstanding.xls")
dat2<-data.frame(dat2)
names(dat2)<-gsub("NULL.","",names(dat2))
names(dat2)[3:length(names(dat))]<-paste("FCY Bonds Issued By",names(dat2)[3:length(names(dat2))])
rm(list=ls())
dat<-readHTMLTable("http://asianbondsonline.adb.org/spreadsheets/RG-LCY_Bond_Market_USD.xls")
dat<-data.frame(dat)
names(dat)<-gsub("NULL.","",names(dat))
names(dat)[3:length(names(dat))]<-paste("LCY Bonds Issued By",names(dat)[3:length(names(dat))])
dat2<-readHTMLTable("http://asianbondsonline.adb.org/spreadsheets/RG-FCY_Bonds_Outstanding.xls")
dat2<-data.frame(dat2)
names(dat2)<-gsub("NULL.","",names(dat2))
names(dat2)[3:length(names(dat2))]<-paste("FCY Bonds Issued By",names(dat2)[3:length(names(dat2))])
# Merge Data Sets
dat<-merge(dat,dat2,by=c("Date","Market"),all=TRUE)
rm(dat2)
head(dat)
require(devtools)
install_github('rCharts',ramnathv)
install_github('rCharts','ramnathv')
names(dat)
require(devtools)
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='jwongsy', token='70EB3B3AA1E9B4050DF1DF3196D21E1E', secret='7TGlLYovr7DntM75c8OV+Nd31RNM/tk5exzjUv9a')
library(shinyapps)
setwd("../Desktop/Developing Data Products/Course Project")
dir()
deployApp()
deployApp(appName="CourseProject")
deployApp(appName="CourseProject")
deployApp(appName="CourseProject")
deployApp(appName="CourseProject")
